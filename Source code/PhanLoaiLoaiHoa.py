# -*- coding: utf-8 -*-
"""PhanLoaiHoaVoiIris.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZMAeKXqtU5hcvV34ITZ9itoJTGNV0RiC
"""

import numpy as np
from sklearn import datasets, svm
from matplotlib import pyplot as plt
from sklearn.datasets import load_iris
import pandas as pd
from sklearn.svm import SVC

# https://www.kaggle.com/datasets/arshid/iris-flower-dataset/code?resource=download
# Bộ dữ liệu là một tệp CSV chứa một bộ gồm 150 bản ghi theo 5 thuộc tính - 
# Chiều dài cánh hoa, Chiều rộng cánh hoa, Chiều dài lá đài, Chiều rộng lá đài và Lớp (Loài)
iris = pd.read_csv('/content/sample_data/IRIS.csv')
iris

iris = datasets.load_iris()
iris

X = iris.data[:, :2]  # Lấy hai thuộc tính đầu tiên
Y = iris.target
X_min, X_max = X[:, 0].min() - .5, X[:, 0].max() + .5
Y_min, Y_max = X[:, 1].min() - .5, X[:, 1].max() + .5
plt.figure(2, figsize=(8, 6))
plt.clf()
# Biểu diễn tập dữ liệu huấn luyện bằng đồ
plt.scatter(X[:, 0], X[:, 1], c=Y, cmap=plt.cm.Paired)
plt.xlabel('Sepal length')
plt.ylabel('Sepal width')
plt.xlim(X_min, X_max)
plt.ylim(Y_min, Y_max)
plt.xticks(())
plt.yticks(())
plt.show()

iris = datasets.load_iris()
X = iris.data[:, :2]  # lấy hai thuộc tính đầu tiên của tập dữ liệu để tiện quan sát bằng đồ thị hai chiều
y = iris.target

h = .02  # hiệu chỉnh độ mỏng của lưới tọa độ trên đồ thị. Càng nhỏ thì càng sắc nét

C = 1.0  # Tham số chuẩn hóa SVM
svc = svm.SVC(kernel='linear', C=C).fit(X, y)
rbf_svc = svm.SVC(kernel='rbf', gamma=0.7, C=C).fit(X, y)
poly_svc = svm.SVC(kernel='poly', degree=3, C=C).fit(X, y)
lin_svc = svm.LinearSVC(C=C).fit(X, y)


# Tiêu đề biểu đồ
titles = ['SVC with linear kernel','LinearSVC (linear kernel)','SVC with RBF kernel','SVC with polynomial (degree 3) kernel']
x_min, X_max = X[:, 0].min() - .5, X[:, 0].max() + .5
y_min, Y_max = X[:, 1].min() - .5, X[:, 1].max() + .5
xx, yy = np.meshgrid(np.linspace(x_min, X_max), np.linspace(y_min, Y_max))
for i, clf in enumerate((svc, lin_svc, rbf_svc, poly_svc)):
#Vẽ ranh giới quyết định. Để làm được điều đó, chúng ta sẽ
# chỉ định một màu cho mỗi điểm trong lưới [x_min, x_max]x[y_min, y_max].
    #plt.subplot(row, col, biểu đồ)
    plt.subplot(2, 2, i + 1)
    plt.subplots_adjust(wspace=0.4, hspace=0.4)

    Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])

    # Đặt kết quả vào một biểu đồ màu
    Z = Z.reshape(xx.shape)
    plt.contourf(xx, yy, Z, cmap=plt.cm.coolwarm, alpha=0.8)
    #  Biểu đồ với các điểm đào tạo
    plt.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.coolwarm)
    plt.xlabel('Sepal length')
    plt.ylabel('Sepal width')
    plt.xlim(xx.min(), xx.max())
    plt.ylim(yy.min(), yy.max())
    plt.xticks(())
    plt.yticks(())
    plt.title(titles[i])
#Biểu diễn biểu đố
plt.show()

iris = load_iris()
iris_pd = pd.DataFrame(iris.data, columns = ['sl','sw','pl','pw'])
iris_pd['species'] = iris.target
iris_pd

iris_sv = iris_pd.iloc[0:100,:] # cắt dòng 0 đến dòng 100
#Lấy 2 loài Setosa và Versicolor 
iris_data = iris_sv[['pl','pw']]# Chiều dài cánh hoa, chiều rộng cánh hoa
Y = iris_sv[['species']] #

#training với model
clf = SVC(kernel ='linear')
clf.fit(iris_data,Y)

clf.predict([[1.5,0.5]])

clf.predict([[4.5,2]])

[[w1,w2]] = clf.coef_ #Hệ số của model weights, w_1 and w_2 của model
b= clf.intercept_

w1

w2

b

#biểu đồ phân tán of training dataset
import seaborn as sns
sns.scatterplot(x='pl', y='pw', data = iris_sv, hue ='species')
xaxis = np.linspace(1.5,3.5,200)
yaxis = -w1/w2*xaxis - b/w2
plt.plot(xaxis, yaxis)
plt.text(3.5, -.5,'$w_1x_1+ w_2x_2 + b = 0$')