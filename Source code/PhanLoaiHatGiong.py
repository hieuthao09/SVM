# -*- coding: utf-8 -*-
"""PhanLoaiHatGiong.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1itCk7vggLilH_4AcPKJRYl3PKOURixbq
"""

import numpy as np
import os
import cv2 as cv
import matplotlib.pyplot as plt
from matplotlib.colors import NoNorm

dataDir='/content/sample_data/data/'
classes=['BC15', 'BQ10', 'NH92']
os.walk(dataDir)

# Hàm thống kê số lượng ảnh của mỗi lớp
def statistic(dataDir):
    label = []
    num_images = []
    for lab in os.listdir(dataDir):
        if lab != ".ipynb_checkpoints":
          label.append(lab)
          files=os.listdir(os.path.join(dataDir, lab))
          c=len(files)
          num_images.append(c)
        else:
          os.listdir(dataDir).remove(".ipynb_checkpoints")
    return label, num_images

# # Hiển thị thống kê
# Mỗi lớp tương ứng với có 96 ảnh
labels, num_images = statistic(dataDir)
print(labels)
print(num_images)

#biểu diễn bằng đồ thị
y_pos = np.arange(len(labels))
plt.barh(y_pos, num_images, align='center')
plt.yticks(y_pos, labels)
print('Total images: %d' %(sum(num_images)))
plt.show()

def LoadData(dataDir,new_size=None):
    if not new_size is None:
        img_rows, img_cols = new_size
    classes=[]
    for _,dirs,_ in os.walk(dataDir):
        classes=dirs
        break
    num_classes=len(classes)
    ValidPercent=30
    X_tr=[]
    Y_tr=[]
    X_te=[]
    Y_te=[]
    for idx,cl in enumerate(classes):
        for _,_,files in os.walk(dataDir+cl+'/'):
            l=len(files)
            for f in files:
                r=np.random.randint(100)
                img_path=dataDir+cl+'/'+f
                img=cv.imread(img_path)
                img = cv.cvtColor(img, cv.COLOR_BGR2RGB)
                if not new_size is None:
                    img=cv.resize(img,(img_rows,img_cols))
                if (r>ValidPercent):
                    X_tr.append(img)
                    Y_tr.append(int(cl[0]))
                else:
                    X_te.append(img)
                    Y_te.append(int(cl[0]))
#     X_tr=np.array(X_tr)
#     Y_tr=np.array(Y_tr)
#     X_va=np.array(X_va)
#     Y_va=np.array(Y_va)
    return X_tr, Y_tr, X_te, Y_te


# new_size=(224,224)
img_train,label_train, img_test, label_test=LoadData(dataDir,None)


idxs=np.random.permutation(len(img_train))
print(idxs)


"""
Hiển thị một số thông tin của tập dữ liệu
"""
print("img for train: %d" % (len(img_train)))
print("label for train: %d" % (len(label_train)))

print("img for test: %d" % (len(img_test)))
print("label for test: %d" % (len(label_test)))

"""
Hiển thị một số ảnh trong tập huấn luyện
"""

idxs=np.random.permutation(len(img_train))
plt.figure(figsize = (10,10))
for i in range(12):  # Lấy ngẫu nhiên 12 mẫu trong tập train
    idx=idxs[i]
    plt.subplot(3,4,i+1)
    plt.subplots_adjust(wspace=0.4, hspace=0.4)
    plt.imshow(img_train[idx],norm=NoNorm())
    plt.title(labels[label_train[idx]])
    #plt.title(label_train[idx])
plt.show()

#TRÍCH XUẤT ĐẶC TRƯNG BẰNG HOG
from skimage.feature import hog
# Định nghĩa hàm trích đặc trưng cho từng ảnh
def get_hog_features(img, orient=8, pix_per_cell=16, cell_per_block=4,vis=False, feature_vec=True):
    # Call with two outputs if vis==True
    if vis == True:
        features, hog_image = hog(img, orientations=orient,
                                  pixels_per_cell=(pix_per_cell, pix_per_cell),
                                  cells_per_block=(cell_per_block, cell_per_block),
                                  transform_sqrt=True,
                                  visualize=vis, feature_vector=feature_vec,multichannel=True)
        return features, hog_image
    else: # Otherwise call with one output
        features = hog(img, orientations=orient,
                       pixels_per_cell=(pix_per_cell, pix_per_cell),
                       cells_per_block=(cell_per_block, cell_per_block),
                       transform_sqrt=True, visualize=vis, feature_vector=feature_vec)
                   #,multichannel=True)
        return features
feature, img_hogg =get_hog_features(img_train[0], vis=True)

plt.subplot(1,2,1)
plt.subplots_adjust(wspace=0.4, hspace=0.4)
plt.imshow(img_train[0],norm=NoNorm())
plt.title("Ảnh gốc")
plt.subplot(1,2,2)
plt.subplots_adjust(wspace=0.4, hspace=0.4)
plt.imshow(img_hogg,norm=NoNorm())
plt.title("Ảnh HOG")
plt.show()

#trích đặc trưng cho tập train và test
feat_train=[]
for img in img_train:
    gray = cv.cvtColor(img, cv.COLOR_RGB2GRAY)
    feat_HOG=get_hog_features(gray)
    feat_train.append(feat_HOG)

feat_test=[]
for img in img_test:
    gray = cv.cvtColor(img, cv.COLOR_RGB2GRAY)
    feat_HOG=get_hog_features(gray)
    feat_test.append(feat_HOG)

# chuyên qua kiểu numpy
X_hog_tr=np.array(feat_train)
Y_tr=np.array(label_train)
X_hog_te=np.array(feat_test)
Y_te=np.array(label_test)

print("train data: " + str(X_hog_tr.shape))
print("train label: " + str(Y_tr.shape))

print("test data: " + str(X_hog_te.shape))
print("test label: " + str(Y_te.shape))

# Huấn luyện SVM
from sklearn.svm import SVC, LinearSVC
model_svm = SVC(kernel="linear", C=1.0)
model_svm.fit(X_hog_tr,Y_tr)

# Kiểm thử mô hình SVM
y_predict = model_svm.predict(X_hog_te)
print ('Độ chính xác: ',model_svm.score(X_hog_te,Y_te))

"""### **Color Histogram**"""

# feature-descriptor-3: Color Histogram
def fd_histogram(image,bins=16, mask=None):
    # convert the image to HSV color-space
    img_hsv = cv.cvtColor(image, cv.COLOR_RGB2HSV)
    # compute the color histogram
    hist  = cv.calcHist([img_hsv], [0, 1, 2], None, [bins, bins, bins], [0, 256, 0, 256, 0, 256])
    # normalize the histogram
    cv.normalize(hist, hist)
    # return the histogram
    return hist.flatten()

#trích đặc trưng cho tập train và test
bins=16
feat_train=[]
for img in img_train:
    feat_chis=fd_histogram(img,bins)
    feat_train.append(feat_chis)

feat_test=[]
for img in img_test:
    feat_chis=fd_histogram(img,bins)
    feat_test.append(feat_chis)
    
# chuyên qua kiểu numpy
X_his_tr=np.array(feat_train)
X_his_te=np.array(feat_test)
Y_tr=np.array(label_train)
Y_te=np.array(label_test)

print("train data: " + str(X_his_tr.shape))
print("train label: " + str(Y_tr.shape))

print("test data: " + str(X_his_te.shape))
print("test label: " + str(Y_te.shape))

# Huấn luyện SVM
from sklearn.svm import SVC
model_svm = SVC(kernel="linear", C=1.0)
model_svm.fit(X_his_tr,Y_tr)


     
SVC(C=1.0, break_ties=False, cache_size=200, class_weight=None, coef0=0.0,
    decision_function_shape='ovr', degree=3, gamma='scale', kernel='linear',
    max_iter=-1, probability=False, random_state=None, shrinking=True,
    tol=0.001, verbose=False)

# Kiểm thử mô hình SVM
y_predict = model_svm.predict(X_his_te)
print ('Độ chính xác: ',model_svm.score(X_his_te,Y_te))